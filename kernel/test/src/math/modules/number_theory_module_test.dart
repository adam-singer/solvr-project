// Copyright (c) 2013 Solvr, Inc. All rights reserved.
//
// This is commercial software. Use or redistribution of this code in full 
// or in part without the express written consent of Solvr is prohibited.

part of solvr_kernel_math_test;

class NumberTheoryModuleTest {
  NumberTheoryModuleTest() {
    group("module (number theory)", () {   
      test("abs", () {
        assertExpression("abs(-9)", "9");
        assertExpression("abs(9)", "9");
        assertExpression("abs(-1/2)", "1/2");
        assertExpression("abs(-2x)", "2 * abs(x)");
        assertExpression("abs(x + y)", "abs(x + y)");
        assertExpression("abs(x^y)", "abs(x^y)");
        assertExpression("abs(x^2)", "abs(x)^2");
        assertExpression("abs(x^-2)", "abs(x)^-2");
      });
      
      test("decimalize", () {
        assertExpression("decimalize(1/2)","0.5");
        assertExpression("decimalize(3/4)","0.75");
        assertExpression("decimalize(5/4)","1.25");
        assertExpression("decimalize(1/7)","0.142857");
        assertExpression("decimalize(1/3)","0.333333");
        assertExpression("decimalize(3/7)","0.428571");
        assertExpression("decimalize(13/3)","4.4333329");
      });
      
      test("div and mod functions", () {
        // TODO test with zero 
        // 1/3
        assertExpression("div(1, 3)", "0");
        assertExpression("mod(1, 3)", "1");
        // 4/2
        assertExpression("div(4, 2)", "2");
        assertExpression("mod(4, 2)", "0");
        // 10/3
        assertExpression("div(10, 3)", "3");
        assertExpression("mod(10, 3)", "1");
        // 3/10
        assertExpression("div(3, 10)", "0");
        assertExpression("mod(3, 10)", "3");
        // 10/10
        assertExpression("div(10, 10)", "1");
        assertExpression("mod(10, 10)", "0"); 
        // 3/-10
        assertExpression("div(3, -10)", "-1");
        assertExpression("mod(3, -10)", "-7"); 
        // -3/10
        assertExpression("div(-3, 10)", "-1");
        assertExpression("mod(-3, 10)", "7");
        // -10/3
        assertExpression("div(-10, 3)", "-4");
        assertExpression("mod(-10, 3)", "2");
        // 10/-3
        assertExpression("div(10, -3)", "-4");
        assertExpression("mod(10, -3)", "-2");
        // -10/-3
        assertExpression("div(-10, -3)", "3");
        assertExpression("mod(-10, -3)", "-1");
        // -3/-10
        assertExpression("div(-3, -10)", "0");
        assertExpression("mod(-3, -10)", "-3");
      });
      
      test("gcd", () {
        // TODO test GCD[-4, 0] = 4 (gcd(a,0) = |a|).
        assertExpression("gcd(3,6)", "3");
        assertExpression("gcd(3,9,18)", "3");
        assertExpression("gcd(3,9,18,8)", "1");
        assertExpression("gcd( gcd(3,6), gcd(6, 12) )", "3");
      });
      
      test("lcm", () {
        assertExpression("lcm(3,9)", "9");
        assertExpression("lcm(3,9,18)", "18");
        assertExpression("lcm(3,9,18,8)", "72");
      });
      
      //test("logarithms", () {
        //assertExpression("log(100)","2");
        //assertExpression("log(0)","-infinity");
        //assertExpression("logn(10,100)","-infinity");
        /*
        75. log(-1) NaN NaN
        76. log(x) NaN NaN
        77.  2 2
        78. logn(10,0) -Infinity -Infinity
        79. logn(10,-1) NaN NaN
        80. logn(-1,10) NaN NaN
        81. logn(x,y) NaN NaN
        82. Log(10,100) 2.0 2.0
        83. Log(10,0) -Infinity -Infinity
        84. Log(10,-1) NaN NaN
        85. Log(-1,10) NaN NaN
        86. Log(x,y) NaN NaN
        */
      //});
      
      test("sqrt", () {
        assertExpression("sqrt(4)", "2");
        assertExpression("sqrt(sqrt(81))", "3");
        // TODO: sqrt needs to handle the symbolic forum of roots. 
//        assertExpression("sqrt(3)", "3^1/2");
//        assertExpression("sqrt(x)", "x^1/2");
//        assertExpression("sqrt(-16)", "4i");
      });
      
      //test("product", () {
        //assertExpression("product()", "1");
        //assertExpression("product(2)", "2");
        //assertExpression("product(1,3)", "3");
        //assertExpression("product({1,2,3})", "6");
        //assertExpression("product([1,2,3,4])", "24");
        // TODO assertExpression("product(1..100)", "5050");
      //});
      
      test("rationalize", () {
        assertExpression("rationalize(0.5)", "1/2");
        assertExpression("rationalize(-0.125)", "-1/8");
        assertExpression("rationalize(pi)", "undefined");
        assertExpression("rationalize(e)", "undefined");
      });
      
      //test("sum", (){
        //assertExpression("sum()", "0");
        //assertExpression("sum(2)", "2");
        //assertExpression("sum(1,2)", "3");
        //assertExpression("sum({1,2,3})", "6");
        //assertExpression("sum([1,2,3,4])", "10");
        // TODO assertExpression("sum(1..100)", "5050");
      //});
       
      // 45. nroot(4,625) 5 5
      // 46. Nroot(4,2) 2^(1/4) 2^(1/4)
      
      test("isPrime", () {
        // Larger test of primes, http://primes.utm.edu/lists/small/100000.txt
        //assertExpression("isPrime(-10)", "false");
        //assertExpression("isPrime(-1)", "false");
        //assertExpression("isPrime(-0)", "false");
        assertExpression("isPrime(0)", "false");
        assertExpression("isPrime(1)", "false");
        assertExpression("isPrime(2)", "true");
        assertExpression("isPrime(3)", "true");
        assertExpression("isPrime(4)", "false");
        assertExpression("isPrime(10)", "false");
        //assertExpression("isPrime(100)", "false");
        //assertExpression("isPrime(107)", "true");
        //assertExpression("isPrime(1789)", "true");
        //assertExpression("isPrime(7919)", "true");
      });

      
      test("nthRoot", () {
        assertExpression("nthRoot(27,3)", "3");
        assertExpression("nthRoot(64,2)", "8");
        assertExpression("nthRoot(1,1)", "1");
        assertExpression("nthRoot(4,2)", "2");
        assertExpression("nthRoot(3125,5)", "5");
        // assertExpression("nthRoot(1073741824,5)", "64"); This assert will pass, but very expensive to calculate
      });
      
      test("fibonacci", () {
        // http://oeis.org/A000045
        var sequence = [0,1,1,2,3,5,8,13,21,34,55,89,144,233,377,610,987,
                        1597,2584,4181,6765,10946,17711,28657,46368,75025,
                        121393,196418,317811,514229,832040,1346269,
                        2178309,3524578,5702887,9227465,14930352,24157817,
                        39088169];
        for (int i=0; i<sequence.length; i++) {
          assertExpression("fibonacci(${i})", "${sequence[i]}");
        }
      });
      
      test("tribonacci", () {
        // http://oeis.org/A000073
        var sequence = [0,0,1,1,2,4,7,13,24,44,81,149,274,504,927,1705,
                        3136,5768,10609,19513,35890,66012,121415,223317,
                        410744,755476,1389537,2555757,4700770,8646064,
                        15902591,29249425,53798080,98950096,181997601,
                        334745777,615693474,1132436852];
       
        for (int i=0; i<sequence.length; i++) {
          assertExpression("tribonacci(${i})", "${sequence[i]}");
        }
      });
      
      test("tetranacci", () {
        // http://oeis.org/A000078
        var sequence = [0,0,0,1,1,2,4,8,15,29,56,108,208,401,773,1490,
                        2872,5536,10671,20569,39648,76424,147312,283953,
                        547337,1055026,2033628,3919944,7555935,14564533,
                        28074040,54114452,104308960,201061985,387559437,
                        747044834,1439975216,2775641472];
        
        for (int i=0; i<sequence.length; i++) {
          assertExpression("tetranacci(${i})", "${sequence[i]}");
        }
      });
      
      test("pentanacci", () {
        // http://oeis.org/A001591
        var sequence = [0,0,0,0,1,1,2,4,8,16,31,61,120,236,464,912,1793,
                        3525,6930,13624,26784,52656,103519,203513,400096,
                        786568,1546352,3040048,5976577,11749641,23099186,
                        45411804,89277256,175514464,345052351,678355061,
                        1333610936,2621810068];
        for (int i=0; i<sequence.length; i++) {
          assertExpression("pentanacci(${i})", "${sequence[i]}");
        }
      });
      
      test("hexanacci", () {
        // http://oeis.org/A001592
        var sequence = [0,0,0,0,0,1,1,2,4,8,16,32,63,125,248,492,976,
                        1936,3840,7617,15109,29970,59448,117920,233904,
                        463968,920319,1825529,3621088,7182728,14247536,
                        28261168,56058368,111196417,220567305,437513522,
                        867844316,1721441096,3414621024];
        for (int i=0; i<sequence.length; i++) {
          assertExpression("hexanacci(${i})", "${sequence[i]}");
        }
      });
      
      test("heptanacci", () {
        // http://oeis.org/A066178
        var sequence = [1,1,2,4,8,16,32,64,127,253,504,1004,2000,3984,
                        7936,15808,31489,62725,124946,248888,495776,
                        987568,1967200,3918592,7805695,15548665,30972384,
                        61695880,122895984,244804400,487641600];
        for (int i=0; i<sequence.length; i++) {
          assertExpression("heptanacci(${i})", "${sequence[i]}");
        }
      });
      
      test("octonacci", () {
        var sequence = [1, 1, 2, 4, 8, 16, 32, 64, 128, 255, 509, 1016, 2028, 4048, 8080];
        for (int i=0; i<sequence.length; i++) {
          assertExpression("octonacci(${i})", "${sequence[i]}");
        }
      });
      
      test("nonanacci", () {
        var sequence = [1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 511, 1021, 2040, 4076, 8144];
        for (int i=0; i<sequence.length; i++) {
          assertExpression("nonanacci(${i})", "${sequence[i]}");
        }
      });
      
      test("decanacci", () {
        var sequence = [1, 1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1023, 2045, 4088, 8172];
        for (int i=0; i<sequence.length; i++) {
          assertExpression("decanacci(${i})", "${sequence[i]}");
        }
      });

      test("primeNumber", () {
        // Disabling most prime numbers to test for. Testing all primes will take some time, can be
        // enabled for regression testing. 
        var primes = [
                      2,      3,      5,      7,     11,     13,     17,     19,     23,     29, 
//                      31,     37,     41,     43,     47,     53,     59,     61,     67,     71, 
//                      73,     79,     83,     89,     97,    101,    103,    107,    109,    113, 
//                      127,    131,    137,    139,    149,    151,    157,    163,    167,    173, 
//                      179,    181,    191,    193,    197,    199,    211,    223,    227,    229, 
//                      233,    239,    241,    251,    257,    263,    269,    271,    277,    281, 
//                      283,    293,    307,    311,    313,    317,    331,    337,    347,    349, 
//                      353,    359,    367,    373,    379,    383,    389,    397,    401,    409, 
//                      419,    421,    431,    433,    439,    443,    449,    457,    461,    463, 
//                      467,    479,    487,    491,    499,    503,    509,    521,    523,    541, 
//                      547,    557,    563,    569,    571,    577,    587,    593,    599,    601, 
//                      607,    613,    617,    619,    631,    641,    643,    647,    653,    659, 
//                      661,    673,    677,    683,    691,    701,    709,    719,    727,    733, 
//                      739,    743,    751,    757,    761,    769,    773,    787,    797,    809, 
//                      811,    821,    823,    827,    829,    839,    853,    857,    859,    863, 
//                      877,    881,    883,    887,    907,    911,    919,    929,    937,    941, 
//                      947,    953,    967,    971,    977,    983,    991,    997,   1009,   1013, 
//                      1019,   1021,   1031,   1033,   1039,   1049,   1051,   1061,   1063,   1069, 
//                      1087,   1091,   1093,   1097,   1103,   1109,   1117,   1123,   1129,   1151, 
//                      1153,   1163,   1171,   1181,   1187,   1193,   1201,   1213,   1217,   1223, 
//                      1229,   1231,   1237,   1249,   1259,   1277,   1279,   1283,   1289,   1291, 
//                      1297,   1301,   1303,   1307,   1319,   1321,   1327,   1361,   1367,   1373, 
//                      1381,   1399,   1409,   1423,   1427,   1429,   1433,   1439,   1447,   1451, 
//                      1453,   1459,   1471,   1481,   1483,   1487,   1489,   1493,   1499,   1511, 
//                      1523,   1531,   1543,   1549,   1553,   1559,   1567,   1571,   1579,   1583, 
//                      1597,   1601,   1607,   1609,   1613,   1619,   1621,   1627,   1637,   1657, 
//                      1663,   1667,   1669,   1693,   1697,   1699,   1709,   1721,   1723,   1733, 
//                      1741,   1747,   1753,   1759,   1777,   1783,   1787,   1789,   1801,   1811, 
//                      1823,   1831,   1847,   1861,   1867,   1871,   1873,   1877,   1879,   1889, 
//                      1901,   1907,   1913,   1931,   1933,   1949,   1951,   1973,   1979,   1987, 
//                      1993,   1997,   1999,   2003,   2011,   2017,   2027,   2029,   2039,   2053, 
//                      2063,   2069,   2081,   2083,   2087,   2089,   2099,   2111,   2113,   2129, 
//                      2131,   2137,   2141,   2143,   2153,   2161,   2179,   2203,   2207,   2213, 
//                      2221,   2237,   2239,   2243,   2251,   2267,   2269,   2273,   2281,   2287, 
//                      2293,   2297,   2309,   2311,   2333,   2339,   2341,   2347,   2351,   2357, 
//                      2371,   2377,   2381,   2383,   2389,   2393,   2399,   2411,   2417,   2423, 
//                      2437,   2441,   2447,   2459,   2467,   2473,   2477,   2503,   2521,   2531, 
//                      2539,   2543,   2549,   2551,   2557,   2579,   2591,   2593,   2609,   2617, 
//                      2621,   2633,   2647,   2657,   2659,   2663,   2671,   2677,   2683,   2687, 
//                      2689,   2693,   2699,   2707,   2711,   2713,   2719,   2729,   2731,   2741, 
//                      2749,   2753,   2767,   2777,   2789,   2791,   2797,   2801,   2803,   2819, 
//                      2833,   2837,   2843,   2851,   2857,   2861,   2879,   2887,   2897,   2903, 
//                      2909,   2917,   2927,   2939,   2953,   2957,   2963,   2969,   2971,   2999, 
//                      3001,   3011,   3019,   3023,   3037,   3041,   3049,   3061,   3067,   3079, 
//                      3083,   3089,   3109,   3119,   3121,   3137,   3163,   3167,   3169,   3181, 
//                      3187,   3191,   3203,   3209,   3217,   3221,   3229,   3251,   3253,   3257, 
//                      3259,   3271,   3299,   3301,   3307,   3313,   3319,   3323,   3329,   3331, 
//                      3343,   3347,   3359,   3361,   3371,   3373,   3389,   3391,   3407,   3413, 
//                      3433,   3449,   3457,   3461,   3463,   3467,   3469,   3491,   3499,   3511, 
//                      3517,   3527,   3529,   3533,   3539,   3541,   3547,   3557,   3559,   3571, 
//                      3581,   3583,   3593,   3607,   3613,   3617,   3623,   3631,   3637,   3643, 
//                      3659,   3671,   3673,   3677,   3691,   3697,   3701,   3709,   3719,   3727, 
//                      3733,   3739,   3761,   3767,   3769,   3779,   3793,   3797,   3803,   3821, 
//                      3823,   3833,   3847,   3851,   3853,   3863,   3877,   3881,   3889,   3907, 
//                      3911,   3917,   3919,   3923,   3929,   3931,   3943,   3947,   3967,   3989, 
//                      4001,   4003,   4007,   4013,   4019,   4021,   4027,   4049,   4051,   4057, 
//                      4073,   4079,   4091,   4093,   4099,   4111,   4127,   4129,   4133,   4139, 
//                      4153,   4157,   4159,   4177,   4201,   4211,   4217,   4219,   4229,   4231, 
//                      4241,   4243,   4253,   4259,   4261,   4271,   4273,   4283,   4289,   4297, 
//                      4327,   4337,   4339,   4349,   4357,   4363,   4373,   4391,   4397,   4409, 
//                      4421,   4423,   4441,   4447,   4451,   4457,   4463,   4481,   4483,   4493, 
//                      4507,   4513,   4517,   4519,   4523,   4547,   4549,   4561,   4567,   4583, 
//                      4591,   4597,   4603,   4621,   4637,   4639,   4643,   4649,   4651,   4657, 
//                      4663,   4673,   4679,   4691,   4703,   4721,   4723,   4729,   4733,   4751, 
//                      4759,   4783,   4787,   4789,   4793,   4799,   4801,   4813,   4817,   4831, 
//                      4861,   4871,   4877,   4889,   4903,   4909,   4919,   4931,   4933,   4937, 
//                      4943,   4951,   4957,   4967,   4969,   4973,   4987,   4993,   4999,   5003, 
//                      5009,   5011,   5021,   5023,   5039,   5051,   5059,   5077,   5081,   5087, 
//                      5099,   5101,   5107,   5113,   5119,   5147,   5153,   5167,   5171,   5179, 
//                      5189,   5197,   5209,   5227,   5231,   5233,   5237,   5261,   5273,   5279, 
//                      5281,   5297,   5303,   5309,   5323,   5333,   5347,   5351,   5381,   5387, 
//                      5393,   5399,   5407,   5413,   5417,   5419,   5431,   5437,   5441,   5443, 
//                      5449,   5471,   5477,   5479,   5483,   5501,   5503,   5507,   5519,   5521, 
//                      5527,   5531,   5557,   5563,   5569,   5573,   5581,   5591,   5623,   5639, 
//                      5641,   5647,   5651,   5653,   5657,   5659,   5669,   5683,   5689,   5693, 
//                      5701,   5711,   5717,   5737,   5741,   5743,   5749,   5779,   5783,   5791, 
//                      5801,   5807,   5813,   5821,   5827,   5839,   5843,   5849,   5851,   5857, 
//                      5861,   5867,   5869,   5879,   5881,   5897,   5903,   5923,   5927,   5939, 
//                      5953,   5981,   5987,   6007,   6011,   6029,   6037,   6043,   6047,   6053, 
//                      6067,   6073,   6079,   6089,   6091,   6101,   6113,   6121,   6131,   6133, 
//                      6143,   6151,   6163,   6173,   6197,   6199,   6203,   6211,   6217,   6221, 
//                      6229,   6247,   6257,   6263,   6269,   6271,   6277,   6287,   6299,   6301, 
//                      6311,   6317,   6323,   6329,   6337,   6343,   6353,   6359,   6361,   6367, 
//                      6373,   6379,   6389,   6397,   6421,   6427,   6449,   6451,   6469,   6473, 
//                      6481,   6491,   6521,   6529,   6547,   6551,   6553,   6563,   6569,   6571, 
//                      6577,   6581,   6599,   6607,   6619,   6637,   6653,   6659,   6661,   6673, 
//                      6679,   6689,   6691,   6701,   6703,   6709,   6719,   6733,   6737,   6761, 
//                      6763,   6779,   6781,   6791,   6793,   6803,   6823,   6827,   6829,   6833, 
//                      6841,   6857,   6863,   6869,   6871,   6883,   6899,   6907,   6911,   6917, 
//                      6947,   6949,   6959,   6961,   6967,   6971,   6977,   6983,   6991,   6997, 
//                      7001,   7013,   7019,   7027,   7039,   7043,   7057,   7069,   7079,   7103, 
//                      7109,   7121,   7127,   7129,   7151,   7159,   7177,   7187,   7193,   7207,
//                      7211,   7213,   7219,   7229,   7237,   7243,   7247,   7253,   7283,   7297, 
//                      7307,   7309,   7321,   7331,   7333,   7349,   7351,   7369,   7393,   7411, 
//                      7417,   7433,   7451,   7457,   7459,   7477,   7481,   7487,   7489,   7499, 
//                      7507,   7517,   7523,   7529,   7537,   7541,   7547,   7549,   7559,   7561, 
//                      7573,   7577,   7583,   7589,   7591,   7603,   7607,   7621,   7639,   7643, 
//                      7649,   7669,   7673,   7681,   7687,   7691,   7699,   7703,   7717,   7723, 
//                      7727,   7741,   7753,   7757,   7759,   7789,   7793,   7817,   7823,   7829, 
//                      7841,   7853,   7867,   7873,   7877,   7879,   7883,   7901,   7907,   7919
                      ];
        
        for (int i=0; i<primes.length; i++) {
          assertExpression("primeNumber(${i})", "${primes[i]}");
        }
      });
    });
  }
}
